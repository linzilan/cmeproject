package baw;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParamArray;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;
import com.maxeler.maxcompiler.v2.managers.standard.Manager.IOType;

public class BAWManager {

	private static final String s_kernelName = "BAWKernel";

	public static void main(String[] args) {
		BAWEngineParameters params = new BAWEngineParameters(args);
		Manager manager = new Manager(params);
		Kernel  kernel  = new BAWKernel(manager.makeKernelParameters(s_kernelName));
		manager.setKernel(kernel);
		/*manager.setIO(
			link("x", IODestination.LMEM_LINEAR_1D),
			link("y", IODestination.CPU),
			link("s", IODestination.CPU));*/
		manager.setIO(IOType.ALL_CPU);

		manager.createSLiCinterface(interfaceDefault());

		configBuild(manager, params);

		manager.build();
	}

	private static EngineInterface interfaceDefault() {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes   type = CPUTypes.FLOAT;
		InterfaceParamArray parameters = engine_interface.addParamArray("parameters", CPUTypes.FLOAT);
		engine_interface.setScalar(s_kernelName, "S", parameters[0]);
		engine_interface.setScalar(s_kernelName, "K", parameters[1]);
		engine_interface.setScalar(s_kernelName, "r", parameters[2]);
		engine_interface.setScalar(s_kernelName, "q", parameters[3]);
		engine_interface.setScalar(s_kernelName, "sigma", parameters[4]);
		engine_interface.setScalar(s_kernelName, "time", parameters[5]);
		engine_interface.setStream("option_price", type, 8*type.sizeInBytes());

		return engine_interface;
	}

	private static void configBuild(Manager manager, BAWEngineParameters params) {
		manager.setEnableStreamStatusBlocks(false);
		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setBuildEffort(Effort.VERY_HIGH);
		//buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		//buildConfig.setMPPRParallelism(params.getMPPRThreads());
		//buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}
}
